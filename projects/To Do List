<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Advanced To-Do List</title>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: #f4f4f4;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: flex-start;
      min-height: 100vh;
    }

    .container {
      margin-top: 50px;
      background: #fff;
      padding: 20px;
      border-radius: 10px;
      width: 90%;
      max-width: 500px;
      box-shadow: 0 0 15px rgba(0,0,0,0.1);
    }

    h2 {
      text-align: center;
      margin-bottom: 20px;
    }

    input, select {
      padding: 10px;
      width: calc(100% - 20px);
      margin-bottom: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
    }

    button {
      padding: 10px;
      width: 100%;
      margin-top: 5px;
      background: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      font-weight: bold;
      cursor: pointer;
    }

    button:hover {
      background: #45a049;
    }

    .task {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: #fafafa;
      margin: 10px 0;
      padding: 10px;
      border-left: 5px solid gray;
      border-radius: 5px;
    }

    .task.high { border-left-color: red; }
    .task.medium { border-left-color: orange; }
    .task.low { border-left-color: green; }

    .task.completed span {
      text-decoration: line-through;
      color: #999;
    }

    .controls button {
      margin-left: 5px;
      background: #ccc;
      color: black;
    }

    .controls button:hover {
      background: #bbb;
    }

  </style>
</head>
<body>
  <div class="container">
    <h2>üìù To-Do List</h2>
    <input type="text" id="taskInput" placeholder="Enter a task..." />
    <select id="priority">
      <option value="medium">Medium Priority</option>
      <option value="high">High Priority</option>
      <option value="low">Low Priority</option>
    </select>
    <button onclick="addTask()">Add Task</button>
    <div id="taskList"></div>
  </div>

  <script>
    let tasks = JSON.parse(localStorage.getItem('tasks')) || [];

    function renderTasks() {
      const taskList = document.getElementById('taskList');
      taskList.innerHTML = '';

      tasks.forEach((task, index) => {
        const taskEl = document.createElement('div');
        taskEl.className = `task ${task.priority} ${task.completed ? 'completed' : ''}`;

        taskEl.innerHTML = `
          <span>${task.text}</span>
          <div class="controls">
            <button onclick="toggleComplete(${index})">${task.completed ? 'Undo' : 'Done'}</button>
            <button onclick="editTask(${index})">Edit</button>
            <button onclick="deleteTask(${index})">Delete</button>
          </div>
        `;

        taskList.appendChild(taskEl);
      });

      localStorage.setItem('tasks', JSON.stringify(tasks));
    }

    function addTask() {
      const taskInput = document.getElementById('taskInput');
      const priority = document.getElementById('priority').value;

      const text = taskInput.value.trim();
      if (!text) {
        alert("Task cannot be empty!");
        return;
      }

      tasks.push({ text, priority, completed: false });
      taskInput.value = '';
      renderTasks();
    }

    function toggleComplete(index) {
      tasks[index].completed = !tasks[index].completed;
      renderTasks();
    }

    function deleteTask(index) {
      if (confirm("Are you sure to delete this task?")) {
        tasks.splice(index, 1);
        renderTasks();
      }
    }

    function editTask(index) {
      const newText = prompt("Edit your task:", tasks[index].text);
      if (newText !== null) {
        tasks[index].text = newText.trim();
        renderTasks();
      }
    }

    // Initial render
    renderTasks();
  </script>
</body>
</html>
